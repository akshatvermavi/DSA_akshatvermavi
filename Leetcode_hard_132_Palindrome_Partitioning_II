// class Solution {
// public:
// bool isPalindrome(string str)
// {
//     // Stores the reverse of the
//     // string S
//     string P = str;
 
//     // Reverse the string P
//     reverse(P.begin(), P.end());
 
//     // If S is equal to P
//     if (str == P) {
//         // Return "Yes"
//         return 1;
//     }
//     // Otherwise
//     else {
//         // return "No"
//         return 0;
//     }
// }
//     int minCut(string s) {
//         if(s.size()==1) return 0;
//         if(s.size()==2 && s[0]!=s[1]) return 1;
//         if(s.size()==2 && s[0]==s[1]) return 0;
//         int p1 =0;
//         int p2 =s.size();
//         string str1;
//         string str2;
//         int count =0;
//         for(int i=1;i<s.size() -1;i++)
//         {
//             if(p1>=0 && p1 <i )
//             {
//                 for(int j=0;j<i;j++){
//                 str1[j] = s[j]; 
//                 p1++;
//                 }
//             }
//            else if(p1>=i && p1 <=s.size())
//             {
//                 for(int j=0;j<i;j++){
//                 str1[j] = s[j]; 
//                 j--;
//                 }
//             }
//             if(isPalindrome(str1) && isPalindrome(str2))
//             {
//                 count++;
//             }
//             if(count>0)
//             return 1;
            
//         }
//         return 0;

//     }
// };

// class Solution {
// public:
// bool ispalindrome(int i, int j, string &str)
// {
//   while(i<j)
//   {
//     if(str[i]==str[j])
//     {
//       i++;
//       j--;
//     }
//     else
//     return false;
//   }
//   return true;
// }
// int f(int i, int n, string &str, vector<int> &dp)
// {
//   if(i==n) return 0;
//   if(dp[i] != -1) return dp[i];
//   int mincost = INT_MAX;
//   for(int j=i;j<n;j++)
//   {
//     if(ispalindrome(i,j,str)){
//     int cost = 1 + f(j+1,n,str,dp);
//     mincost = min(mincost,cost);
//     }
//   }
//   return dp[i]= mincost;
// }
// int isPalindrome(string str)
//  {
//    int n  =  str.size();
//     //int i=0;
//     vector<int>dp(n,-1);
//     return f(0,n, str, dp) -1;


//  }
// };

class Solution {
public:
    int minCut(string str) {
        int n = str.size();
        vector<int> cut(n+1, 0);  // number of cuts for the first k characters
        for (int i = 0; i <= n; i++) cut[i] = i-1;
        for (int i = 0; i < n; i++) {
            for (int j = 0; i-j >= 0 && i+j < n && str[i-j]==str[i+j] ; j++) // odd length palindrome
                cut[i+j+1] = min(cut[i+j+1],1+cut[i-j]);

            for (int j = 1; i-j+1 >= 0 && i+j < n && str[i-j+1] == str[i+j]; j++) // even length palindrome
                cut[i+j+1] = min(cut[i+j+1],1+cut[i-j+1]);
        }
        return cut[n];
    }
};
